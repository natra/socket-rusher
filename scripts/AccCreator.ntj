// AccCreator bot based on AutoMule bot from Etal crew

///////////////////////////////////////////////////
// 		Mule Specific vars
///////////////////////////////////////////////////
var CharPrefix = "";
var CreateCharacterClass = 0;  // 0:Amazon, 1:Sorceress, 2:Necromancer, 3:Paladin, 4:Barbarian, 5:Druid, 6:Assassin 
var Hardcore = false;
var Ladder = false;
var Classic = false;

//////////////////////////////////////
//       Minimum Game Length:       //
//////////////////////////////////////

var gameMinLength		= 180000;	// time in milliseconds, minimum game length, 180 seconds default (1 game/3 minutes)

////////////////////////////////////////
//        Connection Settings:        //
////////////////////////////////////////

var unableToConnectRetry	= 1;		// time in minutes to retry connecting on connection fail (real value is +/- 1 min)
var realmDownRetry		= 900;		// time in minutes to retry connecting on a realm down (default is 300 minutes)
var disconnectedRetry		= 1;		// time in minutes to retry on a disconnection (usually ip ban related)
var cdkeyInUseRetry		= 1;		// time in minutes to retry on a cdkey in use error message (set to 0 to stop)
var connectingToBnetTimeout	= 20000;	// time in milliseconds to wait for a login to time out and click cancel and retry
var characterScreenTimeout	= 10000;	// time in milliseconds to wait for character screen to appear
var pleaseWaitTimeout		= 10000;	// time in milliseconds to wait for a please wait popup
var createGameThreshold		= 10000;		// time in milliseconds to wait between making games
var createGameThresholdRandom	= 1000;		// time in milliseconds to randomly add +/- to the game create time
var createGameTimeout		= 44000;	// time in milliseconds to register a failed to create game
var waitInLineTimeout		= 60000;	// time in milliseconds to wait in lines for a create game (60 second default)
var characterSelectDelay	= 1000;		// time in milliseconds to wait before selecting a character on the char screen
var loginDelay			= 1000;		// time in milliseconds to wait before submitting login information
var clickDelay			= 500;		// wait X milliseconds before next action after a click event
var textDelay			= 500;		// wait X milliseconds before next action after inserting text into a textbox
var clickDelayRandom		= 500;		// random amount of time to add to a click
var textDelayRandom		= 500;		// random amount of time to add to a text set
var gameDoesNotExistDelayMin	= 600000;	// how long to wait when a Game Does Not Exist occurs - minimum - default 10 minutes
var gameDoesNotExistDelayMax	= 900000;	// how long to wait when a Game Does Not Exist occurs - maximum - default 15 minutes
var gameDoesNotExistTimeout	= 30000;	// how long to wait for the dialog to disappear (default 30 seconds, don't change this)
var waitBeforeEnterChatMin	= 1000;		// min how long to wait before entering chat
var waitBeforeEnterChatMax	= 2000;		// max how long to wait before entering chat
var waitInChatBeforeActionsMin	= 2000;		// min how long to wait before joining channel
var waitInChatBeforeActionsMax	= 3000;		// max how long to wait before joining channel
var waitBeforeNextLineChatMin	= 500;		// Minimum ammount of time to add after each text line	
var waitBeforeNextLineChatMax	= 1500;		// Maximum ammount of time to add after each text line
var ftjDelay 					= 180;		// time to idle before trying if leecher failed to join.  In seconds.

// DONT EDIT ANYTHING BELOW THIS

// D2NT Manager Command
const D2NT_MGR_LOADING = 1;
const D2NT_MGR_READY = 2;
const D2NT_MGR_LOGIN = 3;
const D2NT_MGR_CREATE_GAME = 4;
const D2NT_MGR_INGAME = 5;
const D2NT_MGR_RESTART = 6;
const D2NT_MGR_CHICKEN = 7;
const D2NT_MGR_PRINT_STATUS = 8;
const D2NT_MGR_PRINT_LOG = 9;
var alreadyLoggedIn = false; // will only send the login command once leave as unless you want to login everytime you join a channel
var lastGameMade = GetTickCount();
var lastGameStatus = 0;
var nextGameMake = 0;
var inGameAt = 0;
var chatActionsDone = false;
var lastGameFailed = false;
var tempDelay = Random(waitBeforeNextLineChatMin, waitBeforeNextLineChatMax);
var gameInfo = "";
var bugignor = true;
var muleGame = "";
var Muling;
var ingameScript;
var MuleAccount;
var onMule = false;
var GrabMule;
var mulepos;
var myGame = getRandomString(12);
var ftjcount = 0;
var charClass = 0;
var charsDone = 0;
var accCreated = false;

Include("libs/controlInfo.ntl");
Include("libs/common/NTColorConverter.ntl");

var controlData = new controlInfo();

function NTMain()
{
	Delay(1000);
	
	var _ingame = false;

	controlData.clickDelay = clickDelay;
	controlData.textDelay = textDelay;
	controlData.clickDelayRandom = clickDelayRandom;
	controlData.textDelayRandom = textDelayRandom;
	while(charsDone < 8)
	{
		//SendCopyData("D2NT Manager", null, 9<<16, "Lokacja: " + controlData.getLocation().name + "| id: " + controlData.getLocation().id);		
		locationActionMule2(controlData.getLocation());
		Delay(500);
	}
	Delay(1000);
	SendCopyData("D2NT Manager", null, 9<<16, "Creating new chars is done.");
	controlData.click(controlData.controls.characterSelect.button.exit);
	Delay(2000);
	controlData.click(controlData.controls.mainMenu.exitDiabloII);
}

function locationActionMule2(location)
{
	switch(location.id)
	{
	case 3: // Lobby Chat
		break;
	case 1: // Lobby			
		Delay(3000);
		charsDone++;
		controlData.click(controlData.controls.lobby.button.quit);
		Delay(20000);
		break;

	case 2: // Waiting In Line
        if(GetTickCount()-lastGameMade > waitInLineTimeout)
            controlData.click(controlData.controls.lobby.inLine.button.cancel);
        break;

	case 4: // Create Game
		break;
    case 5: // Join Game
		break;
	case 6: // Ladder
		break;

	case 7: // Channel List
		break;

	case 8: // Main Menu
		if(controlData.getCurrentRealmIndex() == me.gatewayid)
		{
			controlData.click(controlData.gameTypes[me.playtype]);
		}
		else
			controlData.click(controlData.controls.mainMenu.button.gateway);
		break;

	case 9: // Login
		sendEventToOOG(D2NT_MGR_PRINT_STATUS, location.name, 0);
		//SendCopyData("D2NT Manager", null, 9<<16, "Acc created: " + accCreated);
		Delay(loginDelay);
		if(!accCreated){
			controlData.click(controlData.controls.login.button.createNewAccount);
		} else {
			controlData.setText(controlData.controls.login.editBox.accountName, me.account);
			Delay(100);
			sendEventToOOG(D2NT_MGR_LOGIN, location.name, 0);

        	locationTimeout(5000, location);
		}
		
		break;
		
	case 10: // Login Error (this is a fatal error, so stop)
		Delay(2000);
		controlData.click(controlData.controls.login.loginError.button.ok);
		Delay(100);
		accCreated = true;
		Delay(3500);
		break;

	case 11: // Unable To Connect
		timeoutDelay(unableToConnectRetry*60*1000, location)
		controlData.click(controlData.controls.login.unableToConnect.button.ok);
		break;

	case 12: // Character Select
		sendEventToOOG(D2NT_MGR_PRINT_STATUS, location.name, 0);
		Delay(2000);
		controlData.click(controlData.controls.characterSelect.button.createNew);
		Delay(2000);
		break;

	case 13: // Realm Down - Character Select screen
		controlData.click(controlData.controls.characterSelect.button.exit);
		timeoutDelay(realmDownRetry*60*1000, location);
		break;

	case 14: // Character Select - Disconnected
		timeoutDelay(disconnectedRetry*60*1000, location);
		controlData.click(controlData.controls.characterSelect.disconnected.button.ok);
		break;

	case 15: // New Character - unknown???
		break;

	case 16: // Character Select - Please Wait popup
		if(!locationTimeout(pleaseWaitTimeout, location))
			controlData.click(controlData.controls.characterSelect.pleaseWait.button.cancel);
		break;

	case 17: // Lobby - Lost Connection - just click okay, since we're toast anyway
		controlData.click(controlData.controls.lobby.lostConnection.button.ok);
		break;

	case 18: // D2 Splash
		controlData.click(controlData.controls.d2Splash.textBox.copyright);
		break;

	case 19: // Login - Cdkey In Use
		timeoutDelay(cdkeyInUseRetry*60*1000, location);
		controlData.click(controlData.controls.login.cdkeyInUse.button.ok);
		break;

	case 20: // Single Player - Select Difficulty
		controlData.click(controlData.singlePlayerDifficulties[me.diff]);
		break;

	case 21: // Main Menu - Connecting
		if(!locationTimeout(connectingToBnetTimeout, location))
			controlData.click(controlData.controls.mainMenu.connecting.button.cancel);
		break;

	case 22: // Login - Invalid Cdkey (classic or xpac)
		sendEventToOOG(D2NT_MGR_RESTART, location.name, 3600);
		Delay(3500);
		break;	

	case 23: // Character Select - Connecting
		if(!locationTimeout(characterScreenTimeout, location))
			controlData.click(controlData.controls.characterSelect.button.exit);
		break;

	case 24: // Server Down - not much to do but wait..
		break;

	case 25: // Lobby - Please Wait
		if(!locationTimeout(pleaseWaitTimeout, location))
			controlData.click(controlData.controls.lobby.pleaseWait.button.cancel);
		break;

	case 26: // Lobby - Game Name Exists
		sendEventToOOG(D2NT_MGR_PRINT_LOG, "Game already exists", 0);
		break;

	case 27: // Gateway Select
		controlData.clickRealmEntry(me.gatewayid);
		controlData.click(controlData.controls.gateway.button.ok);
		break;

	case 28: // Lobby - Game Does Not Exist
		break;

	case 29: // New Character - hero class select
		sendEventToOOG(D2NT_MGR_PRINT_STATUS, location.name, 0);		
		Delay(500);
		controlData.clickClass(charClass);
		Delay(500);
		controlData.setText(controlData.controls.characterCreate.editBox.charName, (CharPrefix + getRandomStringNames(NT_CheckNameLength(CharPrefix, 15), false))); 
		if(Hardcore)
		{	
			_control = controlData.get(controlData.controls.characterCreate.button.hardcore);
			if(_control && !_control.pressed) {
			controlData.click(controlData.controls.characterCreate.button.hardcore);
			}
			Delay(1000);
		} else {
			_control = controlData.get(controlData.controls.characterCreate.button.hardcore);
			if(_control && _control.pressed) {
				controlData.click(controlData.controls.characterCreate.button.hardcore);
			}
			Delay(1000);
		}
		
		if(Ladder)
		{
			_control = controlData.get(controlData.controls.characterCreate.button.ladderChar);
			if(_control &&  !_control.pressed) {
			controlData.click(controlData.controls.characterCreate.button.ladderChar);
			}
			Delay(1000);
		} else {
			_control = controlData.get(controlData.controls.characterCreate.button.ladderChar);
			if(_control && _control.pressed) {
				controlData.click(controlData.controls.characterCreate.button.ladderChar);
			}
			Delay(1000);
		}
		
		if(Classic)
		{
			_control = controlData.get(controlData.controls.characterCreate.button.expansionChar);
			if(_control && _control.pressed) {
			controlData.click(controlData.controls.characterCreate.button.expansionChar);
			}
			Delay(500);
		} else {
			_control = controlData.get(controlData.controls.characterCreate.button.expansionChar);
			if(_control && !_control.pressed) {
				controlData.click(controlData.controls.characterCreate.button.expansionChar);
			}
			Delay(500);
		}
		
		controlData.click(controlData.controls.characterCreate.button.ok);
		Delay(500);		
		if(Hardcore)
		{	
			controlData.click(controlData.controls.characterCreate.button.continueHardcore);
		}
		
		Delay(2000);
		
		if(controlData.getLocation().id == 25){
			Delay(500);
			controlData.click(controlData.controls.lobby.pleaseWait.button.cancel);
			Delay(500);
			break;		
		}

		Delay(500);
		if(charClass < 7){
			charClass++;
		} else
			charClass = 0;
			
		break;

	case 30: // New Character - Character already exists
		controlData.click(controlData.controls.characterCreate.alreadyExists.button.ok);
		Delay(500);
		break;	

	case 31: // Terms of Use
		controlData.click(controlData.controls.termsOfUse.button.agree);
		Delay(500);
		break;
		
	case 32: // Create new Account
		Delay(1000);
		if(accCreated){
			Delay (500);
			controlData.click(controlData.controls.newAccount.button.exit);
			Delay(500);
		} else {
			SendCopyData("D2NT Manager", null, 9<<16, me.account + " has been made!");
			sendEventToOOG(D2NT_MGR_PRINT_STATUS, location.name, 0);
			var _accountname = me.account; 
			Delay(500);
			controlData.setText(controlData.controls.newAccount.editBox.accountName, _accountname);
			Delay(500); 
			controlData.setText(controlData.controls.newAccount.editBox.password, muleAccountPassword);
			Delay (500);
			controlData.setText(controlData.controls.newAccount.editBox.confirmPassword, muleAccountPassword);		
			Delay (500);
			controlData.click(controlData.controls.newAccount.button.ok);
			Delay(500);
			locationTimeout(5000, location);
		}
		break;
	
	case 33: // register email
		controlData.click(controlData.controls.email.button.dontRegister);
		sendEventToOOG(D2NT_MGR_PRINT_LOG, "New account ready", 0);
		break;
		
	case 34: // dont reg mail
		controlData.click(controlData.controls.email.confirm.button.continue);
		break;

	}
}


function sendEventToOOG(locationId, statusString, pendingTime)
{
	return SendCopyData("D2NT Manager", null, (locationId<<16)|pendingTime, statusString);
}

function locationTimeout(time, location)
{
	endtime = GetTickCount() + time;

	while(controlData.getLocation().id == location.id && endtime > GetTickCount())
	{
		sendEventToOOG(D2NT_MGR_PRINT_STATUS, location.name + " (" + parseInt((endtime-GetTickCount())/1000) + "s)", 0);
		Delay(500);
	}

	return (controlData.getLocation().id != location.id);
}

function timeoutDelay(time, location)
{
	endtime = GetTickCount() + time;

	while(endtime > GetTickCount())
	{
		sendEventToOOG(D2NT_MGR_PRINT_STATUS, location.name + " (" + parseInt((endtime-GetTickCount())/1000) + "s)", 0);
		Delay(1000);
	}
}

function getRandomString(_length)
{
	_retString = "";
	_charSet = "0123456789abcdefghijklmnopqrstuvwxyz";
	_cRo = -1;
	_cR = -1;
	while(_length--)
	{
		while(_cRo == _cR)
			_cR = Random(0, _charSet.length-1)
		_retString += _charSet.charAt(_cR);
		Delay(1);
		_cRo = _cR
	}

	return _retString;
}

function getGameName(lastGameString)
{
   if(!lastGameString)
      return "";
   else
      return (lastGameString.split("-")[0] + "-");
}

function getGameCounter(lastGameString, simple)
{
   var myCount;
   if(!lastGameString)
      return "-1";
   else
   {
      switch(lastGameString.split("-")[1])
      {
         case "08":
            myCount = 9;
            break;
         case "09":
            myCount = 10;
            break;
		case "99":
			myCount = 00;
			break;
         default:
            myCount = parseInt(lastGameString.split("-")[1]) + 1;
            break;
      }
      if(!simple)
      {
         if(myCount <= 9)
            return ('0' + myCount);
      }
      return myCount;
   }
}

function My_Delay(retry)
{
    if (arguments.length < 1)
        retry = 20;

    while (retry-- > 0)
        Delay(1000);
}

function NT_CheckNameLength(prefix, totallength)
{
	var _howManyChars = totallength - prefix.length
	return _howManyChars;
}

function getRandomStringNames(_length)
{
	_retString = "";
	_charSet = "abcdefghijklmnopqrstuvwxyz";
		
	while(_length--)
	{
		_retString += _charSet.charAt(Random(0, _charSet.length-1));
		Delay(50); 
	}
	return _retString;
}